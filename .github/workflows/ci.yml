name: CI LimeAPI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  build:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Set up environment variables
        run: |
          echo "API_PORT=${{ vars.API_PORT }}" >> $GITHUB_ENV
          echo "ETH_NODE_URL=${{ secrets.ETH_NODE_URL }}" >> $GITHUB_ENV
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_CONNECTION_URL=${{ secrets.DB_CONNECTION_URL }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build --no-cache -t limeapi --build-arg API_PORT=${{ env.API_PORT }} .

      - name: Upload code artifact
        uses: actions/download-artifact@v4
        with:
          name: code-artifact
          path: ./

      - name: Clean up unused Docker images and containers
        run: |
          # keep the last 10 images
          IMAGES_TO_REMOVE=$(docker images --format '{{.ID}}' | tail -n +11)

          # stop and remove containers older than 24 hours that are using those images
          if [ -n "$IMAGES_TO_REMOVE" ]; then
            # find all containers using the images to remove
            CONTAINERS_TO_REMOVE=$(docker ps -a --filter "ancestor=$IMAGES_TO_REMOVE" -q)

            # check each container and remove if older than 24 hours
            for CONTAINER in $CONTAINERS_TO_REMOVE; do
              CREATED_AT=$(docker inspect -f '{{.Created}}' $CONTAINER)
              if [[ $(date -d "$CREATED_AT" +%s) -lt $(date -d '24 hours ago' +%s) ]]; then
                docker stop $CONTAINER || true
                docker rm $CONTAINER || true
              fi
            done
          fi

          # remove the images that are not among the last 10
          if [ -n "$IMAGES_TO_REMOVE" ]; then
            docker rmi $IMAGES_TO_REMOVE || true
          fi

          # remove dangling images
          dangling_images=$(docker images -f "dangling=true" -q)
          if [ -n "$dangling_images" ]; then
            docker rmi $dangling_images || true
          fi

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download code artifact
        uses: actions/download-artifact@v2
        with:
          name: code-artifact

      - name: Create Docker network
        run: docker network create my_network

      - name: Run PostgreSQL container
        run: |
          docker run --name postgres_db --network my_network -d \
          -e POSTGRES_USER=${{ env.POSTGRES_USER }} \
          -e POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
          -e POSTGRES_DB=postgres \
          -p 5432:5432 \
          -v postgres_data:/var/lib/postgresql/data \
          --restart unless-stopped \
          postgres:16.4

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec postgres_db pg_isready -U ${{ env.POSTGRES_USER }}; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          if [ $i -eq 30 ]; then
            echo "PostgreSQL did not become ready in time."
            exit 1
          fi

      - name: Run linter
        run: |
          set -e
          docker run --rm --platform linux/amd64 -v ${{ github.workspace }}:/app -w /app golangci/golangci-lint:v1.60.3 golangci-lint run --timeout 3m ./...

      - name: Run unit tests
        run: |
          set -e
          docker run --rm --network my_network -e DB_CONNECTION_URL=${{ env.DB_CONNECTION_URL }} -v ${{ github.workspace }}:/app -w /app golang:1.23.0 go test ./... -count=1 -v

      - name: Notify Developer
        if: success()
        run: |
          MESSAGE="✅Linting and tests completed successfully on commit ${{ github.sha }}!"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d "text=$MESSAGE"

      - name: Notify Developer on Failure
        if: failure()
        run: |
          MESSAGE="❌Linting or tests failed on commit ${{ github.sha }}. Please check the logs."
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d "text=$MESSAGE"

      - name: Clean up Docker containers and network
        if: always()
        run: |
          if [ "$(docker ps -aq -f name=postgres_db)" ]; then
            docker stop postgres_db
            docker rm postgres_db
          fi
          if [ "$(docker network ls -q -f name=my_network)" ]; then  # Check if the network exists before removing
            docker network rm my_network
          fi

  push:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag Docker image for GHCR
        run: |
          IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/limeapi:${{ github.sha }}
          docker tag limeapi $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker image to GHCR
        run: docker push ${{ env.IMAGE_TAG }}

      - name: Notify Developer
        if: success()
        run: |
          IMAGE_URL="ghcr.io/${{ github.repository_owner }}/limeapi:${{ github.sha }}"
          MESSAGE="✅Docker image pushed successfully to GitHub Container Registry (GHCR)!%0A"
          MESSAGE+="Repository: ${{ github.repository }}%0A"
          MESSAGE+="Image: $IMAGE_URL%0A"
          MESSAGE+="Commit: ${{ github.sha }}%0A"
          MESSAGE+="Branch: ${{ github.ref }}%0A"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d "text=$MESSAGE"
