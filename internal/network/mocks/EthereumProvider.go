// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "ethereum-fetcher/internal/store/pg/models"

	mock "github.com/stretchr/testify/mock"
)

// EthereumProvider is an autogenerated mock type for the EthereumProvider type
type EthereumProvider struct {
	mock.Mock
}

// GetTransactionByHash provides a mock function with given fields: hash
func (_m *EthereumProvider) GetTransactionByHash(hash string) (*models.Transaction, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByHash")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Transaction, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Transaction); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEthereumProvider creates a new instance of EthereumProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthereumProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthereumProvider {
	mock := &EthereumProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
